// This function is called for multiple values of "now"
def scene_at(now)
{

var camera = Cameras.perspective( [ "eye": pos(0,0,5),
                                      "look_at": pos(0,0,0) ] )

var sphere_material_red = Materials.uniform( [ "ambient": Colors.red() * 0.1,
												"diffuse": Colors.red() * 0.8,
                                             	"light_filtering":  RGB(0.8,0,0)] )
                                             	
var sphere_material_blue = Materials.uniform( [ "ambient": Colors.blue() * 0.1,
												"diffuse": Colors.blue() * 0.8,
                                             	"light_filtering":  RGB(0,0,0.8)] )
                                             	 
var wall_material = Materials.uniform( [ "ambient": Colors.white() * 0.5,
                                         "diffuse": Colors.white() * 0.8] )


  var primitives = []
	
  //primitives.push_back( translate(vec(-5,0,0), decorate(wall_material, yz_plane())) )
  primitives.push_back( translate(vec(0,0,-5), decorate(wall_material, xy_plane())) )
  //primitives.push_back( translate(vec(5,0,0), decorate(wall_material, yz_plane())) )
  
 
  primitives.push_back( decorate( sphere_material_red, translate(vec(-2,0,0), sphere()) ) )
  primitives.push_back( decorate( sphere_material_blue, translate(vec(2,0,0), sphere()) ) )

  var root = union(primitives)
  var x = Animations.animate(5, -5, seconds(1))
  var y = Animations.animate(-5, 5, seconds(1))
  var lights = [ Lights.omnidirectional( pos(y[now],0,5), Colors.white() )]

  create_scene(camera, root, lights)
}

var renderer = Renderers.standard( [ "width": 500,
                                     "height": 500,
                                     "sampler": Samplers.single(),
                                     "ray_tracer": Raytracers.v5() ] )

pipeline( scene_animation(scene_at, seconds(5)),
          [ Pipeline.animation(30),
            Pipeline.renderer(renderer),
            Pipeline.wif(),
            Pipeline.base64(),
            Pipeline.stdout() ] )