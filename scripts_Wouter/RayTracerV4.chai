// This function is called for multiple values of "now"
def scene_at(now)
{

var x = Animations.animate(2, 25, seconds(5))

var camera = Cameras.perspective( [ "eye": pos(0,0,x[now]),
                                      "look_at": pos(0,-10,0) ] )

var sphere_material_red = Materials.uniform( [ "ambient": Colors.red() * 0.1,
												"diffuse": Colors.red() * 0.8,
												"specular": Colors.white() * 0.8,
                                             	"specular_exponent": 10] )
                                             	 
var wall_material = Materials.uniform( [ "ambient": Colors.white() * 0.1,
                                         "diffuse": Colors.white() * 0.8] )


  var primitives = []

  primitives.push_back( translate(vec(-5,0,0), decorate(wall_material, yz_plane())) )
  primitives.push_back( translate(vec(5,0,0), decorate(wall_material, yz_plane())) )
  
  var i = -10;
  for (var n = 0; n < 20; n += 1) {
	primitives.push_back( decorate( sphere_material_red, translate(vec(-2,i,0), sphere()) ) )
	primitives.push_back( decorate( sphere_material_red, translate(vec(2,i,0), sphere()) ) )
	i = i+3
  }

  var root = union(primitives)

  var lights = [ Lights.omnidirectional( pos(0,0,5), Colors.white() ),
  				 Lights.omnidirectional( pos(0,0,-5), Colors.white() )]
  				 
  
  

  create_scene(camera, root, lights)
}

var renderer = Renderers.standard( [ "width": 500,
                                     "height": 500,
                                     "sampler": Samplers.single(),
                                     "ray_tracer": Raytracers.v4() ] )

pipeline( scene_animation(scene_at, seconds(5)),
          [ Pipeline.animation(30),
            Pipeline.renderer(renderer),
            Pipeline.wif(),
            Pipeline.base64(),
            Pipeline.stdout() ] )