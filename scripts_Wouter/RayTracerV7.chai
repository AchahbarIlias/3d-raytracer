// This function is called for multiple values of "now"
def scene_at(now)
{
var x = Animations.animate(6, 0, seconds(5))
var y = Animations.animate(0, 5, seconds(5))
var camera = Cameras.perspective( [ "eye": pos(-5,0,x[now]),
                                      "look_at": pos(y[now],0,0) ] )

var sphere_material_red = Materials.uniform( [ "ambient": Colors.red() * 0.1,
												"diffuse": Colors.red() * 0.8,
												"translucency": 0.5] )
                                             	
var sphere_material_green = Materials.uniform( [ "ambient": Colors.green() * 0.1,
												"diffuse": Colors.green() * 0.8,
												"translucency": 0.5] )
												
var sphere_material_blue = Materials.uniform( [ "ambient": Colors.blue() * 0.1,
												"diffuse": Colors.blue() * 0.8,
												"translucency": 0.5] )
                                             	 



  var primitives = []
  
  primitives.push_back( decorate( sphere_material_red, translate(vec(-2,0,2), sphere()) ) )
  primitives.push_back( decorate( sphere_material_green, translate(vec(2,0,2), sphere()) ) )
  primitives.push_back( decorate( sphere_material_blue, translate(vec(6,0,2), sphere()) ) )
  primitives.push_back( decorate( sphere_material_red, translate(vec(-2,0,-2), sphere()) ) )
  primitives.push_back( decorate( sphere_material_green, translate(vec(2,0,-2), sphere()) ) )
  primitives.push_back( decorate( sphere_material_blue, translate(vec(6,0,-2), sphere()) ) )
  primitives.push_back( decorate( sphere_material_red, translate(vec(10,0,2), sphere()) ) )
  primitives.push_back( decorate( sphere_material_green, translate(vec(14,0,2), sphere()) ) )
  primitives.push_back( decorate( sphere_material_blue, translate(vec(18,0,2), sphere()) ) )
  primitives.push_back( decorate( sphere_material_red, translate(vec(10,0,-2), sphere()) ) )
  primitives.push_back( decorate( sphere_material_green, translate(vec(14,0,-2), sphere()) ) )
  primitives.push_back( decorate( sphere_material_blue, translate(vec(18,0,-2), sphere()) ) )

  var root = union(primitives)
  var lights = [ Lights.omnidirectional( pos(0,5,0), Colors.white() )]

  create_scene(camera, root, lights)
}

var renderer = Renderers.standard( [ "width": 500,
                                     "height": 500,
                                     "sampler": Samplers.single(),
                                     "ray_tracer": Raytracers.v7() ] )

pipeline( scene_animation(scene_at, seconds(5)),
          [ Pipeline.animation(30),
            Pipeline.renderer(renderer),
            Pipeline.wif(),
            Pipeline.base64(),
            Pipeline.stdout() ] )